type Query {
  user(uid: String!): User!
  tags: [Tag!]!
  users: [User]!
  messagesWhereSender(username: String!): [Message]
  messagesWhereRecipient(username: String!): [Message]
  questions: [Question]!
  questionsByUser(username: String!): [Question]
  sessions: [Session!]!
  sessionsWhereUnacceptedPupil(username: String): [Session!]!
  # sessionsWhereAcceptedExpert(username: String): [Session!]!
  # sessionsWhereRejectedExpert(username: String): [Session!]!
  sessionsForExpert(username: String): [Session!]!
}

type Mutation {
   createUser(email: String!, uid: String!, username: String!): User
   updateUser(id: ID!, email: String, uid: String, description: String, privacy: String, coins: Int, tags: [String], username: String, image: String, dailyClaimed: Boolean, inSession: Boolean, online: Boolean, debt: Int): User
   updateManyUsers(dailyClaimed: Boolean): BatchPayload!
   updateManyMessages: BatchPayload!
   login(email: String!, password: String!): LoginPayload!
   createQuestion(user: UserCreateOneInput, description: String!, tags: [String!]!, coins: Int!, title: String!, text: Boolean!, audio: Boolean!, video: Boolean!, duration: Int!): Question
   createSession(type: String!, question: QuestionCreateOneInput, expert: UserCreateOneInput, pupil: UserCreateOneInput, duration: Int, accepted: Boolean, completed: Boolean, startedAt: DateTime, endedAt: DateTime): Session
   updateSession(id: String!, accepted: Boolean, completed: Boolean, startedAt: DateTime, endedAt: DateTime): Session
   addTag(name: String!): Tag
}

type BatchPayload {
  count: Int
}

type User {
  id: ID!
  username: String!
  email: String!
  uid: String!
  tags: [String!]
  description: String
  inSession: Boolean
  online: Boolean
  dailyClaimed: Boolean
  questions: [Question!]!
  debt: Int
  coins: Int 
  ranking: Int
  image: String
  session: [Session!]!
}


type Session {
  id: ID!
  question: Question
  type: String!
  expert: User
  pupil: User
  duration: Int
  accepted: Boolean
  completed: Boolean
  startedAt: DateTime
  endedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  questionId: String
}


type Tag {
  id: ID!
  name: String!
}

type Question {
  id: ID!
  user: User
  description: String!
  tags: [String!]
  coins: Int!
  active: Boolean
  title: String!
  text: Boolean!
  audio: Boolean!
  video: Boolean!
  duration: Int!
  answeredBy: User
}

type Message {
  id: ID!
  sender: User 
  recipient: User
  message: String
  read: Boolean
  createdAt: DateTime!
}

input UserCreateOneInput {
  connect: UserInput
}

input UserInput {
  username: String
}

input QuestionCreateOneInput {
  connect: QuestionInput
}

input QuestionInput {
  id: String
}

scalar DateTime

type Subscription {
  subscribeToSessionAsExpert(username:String!): SessionSubscriptionPayload
}

type SessionSubscriptionPayload {
  updatedFields: [String!]
}

type LoginPayload {
  token: String
  error: String
}