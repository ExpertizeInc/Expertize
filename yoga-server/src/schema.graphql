type Query {
  user(uid: String!): User
  tags: [String!]!
  users: [User]!
  questions: [Question]!
}

type User {
  id: ID!
  username: String!
  email: String!
  uid: String!
  user: Profile!
}

type Profile {
  id: ID!
  user: User!
  tags: [Tag!]!
  description: String
  coins: Int 
  session: [Session!]!
}


type Session {
  id: ID!
  type: String!
}

type LoginPayload {
  token: String
  error: String
}

type UserTag {
  id: ID! 
  user: User!
  tag: Tag!
}

type Tag {
    id: ID!
    name: String!
}

 type Question {
   id: ID!
   userId: String!
   description: String!
   tag: String!
   coins: Int!
   active: Boolean
   chat: ChatType!
   title: String!
 }

  enum ChatType {
    AUDIO
    VIDEO
    TEXT
  }

type Mutation {
   createUser(email: String!, uid: String!, username: String!): User
   updateUser(id: String!, email: String, uid: String, description: String, coins: Int): User
   login(email: String!, password: String!): LoginPayload!
   addTag(name: String!): Tag
   createQuestion(userId: String!, description: String!, tag: String!, coins: Int!, chat: ChatType!, title: String!): Question
}