type Query {
  user(uid: String!): User
  tags: [Tag!]!
  users: [User]!
  questions: [Question]!
  questionsByUser(userId: String!): [Question]
}

type Mutation {
<<<<<<< HEAD
  createUser(email: String!, uid: String!, username: String!): User
  updateUser(id: String!, email: String, uid: String, description: String, coins: Int, tags: [String]): User
  login(email: String!, password: String!): LoginPayload!
  addTag(name: String!): Tag
  createQuestion(userId: String!, username: String!, description: String!, tags: [String!]!, coins: Int!, title: String!, text: Boolean!, audio: Boolean!, video: Boolean!, duration: Int!): Question
=======
   createUser(username: String!, email: String!, uid: String!): User
   updateUser(id: String!, email: String, uid: String, description: String, coins: Int, tags: [String]): User
   login(email: String!, password: String!): LoginPayload!
   createQuestion(userId: String!, username: String!, description: String!, tags: [String!]!, coins: Int!, title: String!, text: Boolean!, audio: Boolean!, video: Boolean!, duration: Int!): Question
   createSession(type: String!, expert: UserCreateOneInput, pupil: UserCreateOneInput, duration: Int, accepted: Boolean, completed: Boolean, startedAt: DateTime, endedAt: DateTime): Session
   updateSession(id: String!, accepted: Boolean, completed: Boolean, startedAt: DateTime, endedAt: DateTime): Session
   addTag(name: String!): Tag
>>>>>>> dev
}

type User {
  id: ID!
  username: String!
  email: String!
  uid: String!
  tags: [String!]!
  description: String
  coins: Int 
  # session: [Session!]!
}

type Session {
  id: ID!
  type: String!
<<<<<<< HEAD
  pupil: String!
  teacher: String
=======
  expert: User
  pupil: User
  duration: Int
  accepted: Boolean
  completed: Boolean
  startedAt: DateTime
  endedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
>>>>>>> dev
}

type LoginPayload {
  token: String
  error: String
}

type Tag {
  id: ID!
  name: String!
}

type Question {
  id: ID!
  userId: String!
  username: String
  description: String!
  tags: [String!]!
  coins: Int!
  active: Boolean
  title: String!
  text: Boolean!
  audio: Boolean!
  video: Boolean!
  duration: Int!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

type Subscription {
  subscribeToSessionAsPupil(pupil: String!): SessionSubscriptionPayload
  subscribeToSessionAsTeacher(teacher: String!): SessionSubscriptionPayload
}

input UserCreateOneInput {
  connect: UserInput
}

input UserInput {
  username: String
}

scalar DateTime
